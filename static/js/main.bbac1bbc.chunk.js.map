{"version":3,"sources":["serviceWorker.js","components/login/login.js","components/signup/signup.js","components/chatlist/chatblock.js","components/chatlist/chatlist.js","components/chatTextBox/chatTextBox.js","components/ChatViewComponent/chatViewComponent.js","components/newChat/newChat.js","components/dashboard/dashboard.js","components/landingPage/landingPage.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","require","loginComponent","state","userTyping","type","e","setState","email","target","value","password","submitSignup","preventDefault","auth","signInWithEmailAndPassword","then","props","history","push","catch","err","error","className","Row","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","style","color","this","Button","variant","to","Component","signupComponent","passwordConfirmation","createUserWithEmailAndPassword","authRes","userObj","user","firestore","collection","doc","set","dbError","authError","ChatBlock","Media","onClick","highlighted","name","userEmail","Body","children","ChatlistComponent","newChat","newChatButtonFunction","signOut","chats","map","chat","index","id","users","filter","selectChatFunction","selectedChatIndex","messages","length","message","substring","ChatTextBox","keyCode","sendHandler","validateMsg","msg","trim","submitMsg","document","getElementById","InputGroup","FormControl","onKeyUp","aria-label","aria-describedby","Append","ChatViewComponent","componentDidUpdate","container","scrollTo","scrollHeight","frnd","x","docId","getDocId","update","FieldValue","arrayUnion","sender","timestamp","Date","now","friend","sort","join","key","NewChatComponent","username","buildDocId","currentUser","createChat","createChatFunction","goToChat","goToChatFunction","submitChat","a","userExists","chatExists","get","exists","userSnapshot","docs","data","includes","as","rows","dashboardComponent","docKey","usersInChat","split","find","_chat","every","_user","newChatFormVisible","selectChat","indexOf","submitMessage","selectedChat","_usr","receiverHasRead","newChatSubmit","chatIndex","newChatButtonClicked","componentDidMount","onAuthStateChanged","where","onSnapshot","res","console","log","Col","xs","md","landingPage","signup","login","Jumbotron","href","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","routing","path","component","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbac1bbc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\nimport './styles.css';\nconst firebase = require(\"firebase\");\n\nclass loginComponent extends Component {\n  state = {};\n  constructor() {\n    super();\n    this.state = {\n      email: null,\n      password: null,\n      error: \"\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"panel\">\n        <Row className=\"justify-content-md-center\"><h1>Log in</h1></Row>\n        <Row className=\"justify-content-md-center\"><Form \n          onSubmit={e => {\n            this.submitSignup(e);\n          }}\n        >\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter email\"\n              onChange={e => {\n                this.userTyping(\"email\", e);\n              }}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={e => {\n                this.userTyping(\"password\", e);\n              }}\n            />\n          </Form.Group>\n          <div style={{ color: \"red\" }}>{this.state.error}</div>\n          <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n          <div>Don't have an account?</div>\n          <Link to=\"/chatter/signup\">Sign Up!</Link>\n        </Form>\n        </Row>\n      </div>\n    );\n  }\n  userTyping = (type, e) => {\n    switch (type) {\n      case \"email\":\n        this.setState({ email: e.target.value });\n        break;\n      case \"password\":\n        this.setState({ password: e.target.value });\n        break;\n      default:\n        break;\n    }\n    // console.log(this.state);\n  };\n  submitSignup = e => {\n    e.preventDefault();\n\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(this.state.email, this.state.password)\n      .then(() => {\n        this.props.history.push(\"/chatter/dashboard\");\n      })\n      .catch(err => {\n        // console.log(err);\n        this.setState({ error: \"Incorrect Login credentials\" });\n        // console.log(\"see error message changed\", this.state.error);\n      });\n  };\n}\n\nexport default loginComponent;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { Link } from \"react-router-dom\";\nimport './styles.css';\nconst firebase = require(\"firebase\");\n\nclass signupComponent extends Component {\n  state = {};\n  constructor() {\n    super();\n    this.setState({\n      email: null,\n      password: null,\n      passwordConfirmation: null,\n      error: \"\"\n    });\n  }\n  render() {\n    return (\n      <div className=\"panel\">\n          <Row className=\"justify-content-md-center\"><h1>\n              Sign up\n          </h1></Row>\n        <Row className=\"justify-content-md-center\"><Form\n          onSubmit={e => {\n            this.submitSignup(e);\n          }}\n        >\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter email\"\n              onChange={e => {\n                this.userTyping(\"email\", e);\n              }}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={e => {\n                this.userTyping(\"password\", e);\n              }}\n            />\n          </Form.Group>\n          <Form.Group controlId=\"passwordConfirmation\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Re-enter password\"\n              onChange={e => {\n                this.userTyping(\"passwordConfirmation\", e);\n              }}\n            />\n          </Form.Group>\n          <div style={{ color: \"red\" }}>{this.state.error}</div>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n          <div>Already have an account?</div>\n          <Link to=\"/chatter/login\">Log in!</Link>\n        </Form></Row>\n      </div>\n    );\n  }\n\n  submitSignup = e => {\n    e.preventDefault();\n    // console.log(this.state);\n    if (!(this.state.password === this.state.passwordConfirmation)) {\n      this.setState({\n        error: \"'Confirm Password' and 'Password' do not match.\"\n      });\n    } else {\n      this.setState({\n        error: \"\"\n      });\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(this.state.email, this.state.password)\n        .then(authRes => {\n          const userObj = {\n            email: authRes.user.email\n          };\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(this.state.email)\n            .set(userObj)\n            .then(() => {\n              this.props.history.push(\"/chatter/dashboard\"); //prop received from the router.\n            })\n            .catch(dbError => {\n              // console.log(dbError);\n              this.setState({ error: \"User could not be added\" });\n            });\n        })\n        .catch(authError => {\n          // console.log(authError);\n          this.setState({ error: \"User could not be added\" });\n        });\n    }\n  };\n  userTyping = (type, e) => {\n    switch (type) {\n      case \"email\":\n        this.setState({ email: e.target.value });\n        break;\n      case \"password\":\n        this.setState({ password: e.target.value });\n        break;\n      case \"passwordConfirmation\":\n        this.setState({ passwordConfirmation: e.target.value });\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport default signupComponent;\n","import React, { Component } from 'react';\nimport Avatar from 'react-avatar';\nimport Row from \"react-bootstrap/Row\";\nimport Media from \"react-bootstrap/Media\";\nimport './styles.css'\nclass ChatBlock extends Component {\n    state = {  }\n\n    render() {\n        //console.log(this.props.highlighted);\n        return (<Media onClick={this.props.onClick} className={this.props.highlighted?\"grey\":\"white\"}>\n            <Avatar name={this.props.userEmail }    />\n            <Media.Body >\n            <h5>{this.props.userEmail}</h5>\n            <p>{this.props.children}</p>\n            </Media.Body>\n            </Media>  );\n    }\n}\n \nexport default ChatBlock;","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport ChatBlock from './chatblock';\nimport Row from \"react-bootstrap/Row\";\nimport './styles.css'\nconst firebase=require('firebase');\nclass ChatlistComponent extends Component {\n  state = {};\n  render() {\n    return (\n      <Row className=\"pad justify-content-center\"><div>\n        <Row className=\"pad justify-content-center\"><Button className=\"pad newchat\" onClick={this.newChat}>New Chat</Button></Row>\n        <Row className=\"pad justify-content-center\">{this.props.chats ? (\n          <div>\n            {this.props.chats.map((chat, index) => {\n              return (\n                <ChatBlock id={index} userEmail={\n                    chat.users.filter(\n                      user => user !== this.props.userEmail\n                    )[0] \n                  }\n                  onClick={()=>{\n                      this.props.selectChatFunction(index)\n                     // console.log(index,'clicked');\n                  }}\n                  highlighted={index===this.props.selectedChatIndex}\n                  >\n                   {\n                       chat.messages[chat.messages.length-1].message.substring(0,20)+'...'\n                   } \n                  </ChatBlock>\n              );\n            })}\n            \n          </div>\n        ) : null}</Row>\n         <Row className=\"pad justify-content-center\"><Button className=\"signout\" onClick={this.signOut}>Sign Out</Button></Row>\n      </div></Row>\n    );\n  }\n  newChat = () => {\n    //console.log(\"New chat button clicked\");\n    this.props.newChatButtonFunction();\n  };\n  signOut = () => {\n    firebase.auth().signOut();\n  };\n\n\n}\n\nexport default ChatlistComponent;\n","import React, { Component } from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nclass ChatTextBox extends Component {\n    constructor(){\n        super();\n        this.state={\n            message: ''\n        }\n    }\n    render() { \n        return ( <InputGroup className=\"mb-3\" onSubmit={this.sendHandler}>\n        <FormControl\n          onKeyUp={(e)=>this.userTyping(e)}\n          placeholder=\"Enter Message\"\n          aria-label=\"Recipient's username\"\n          aria-describedby=\"basic-addon2\"\n          id='chat-text-box'\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-secondary\" onClick={this.sendHandler} >Send</Button>\n        </InputGroup.Append>\n      </InputGroup>);\n    }\n    userTyping=(e)=>{\n        if(e.keyCode===13){\n            this.sendHandler()\n        }\n        else{\n            this.setState({message: e.target.value}); \n        }\n    }\n    validateMsg=(msg)=>{\n        return (msg.length>0 && (msg.trim()).length>0);\n    }\n    sendHandler=()=>{\n        //console.log(this.state.message);\n        //console.log(this.validateMsg(this.state.message))\n        if(this.validateMsg(this.state.message)){\n            this.props.submitMsg(this.state.message);\n            document.getElementById('chat-text-box').value='';\n            \n        }\n      \n    }\n}\n \nexport default ChatTextBox;","import React, { Component } from \"react\";\nimport ChatTextBox from \"../chatTextBox/chatTextBox\";\nimport './styles.css'\nconst firebase=require('firebase');\n\nclass ChatViewComponent extends Component {\n  componentDidUpdate = () => {\n    const container = document.getElementById(\"chat-view-container\");\n    if (container) container.scrollTo(0, container.scrollHeight);\n  };\n  render() {\n    const { chat, user } = this.props;\n    //console.log(chat);\n    return chat ? (\n      /*Make this scrollable*/\n      <div id=\"chat-view-container\">\n        <div className=\"urconv\">\n          <h3>\n            Your conversation with{\" \"}\n            {\n              chat.users.filter(x => {\n                return x !== user;\n              })[0]\n            }\n          </h3>\n        </div >\n        {chat.messages.map((msg, index) => {\n          /*Two cases for style assignment based on whether sent by user or by the other person */\n          return <div key={index} className=\"message\"><font color={msg.sender!==user?\"red\":\"blue\"}><b>{msg.sender}</b></font>\n          <font color=\"white\">{\": \"+msg.message}</font></div>;\n        })}\n        <ChatTextBox submitMsg={(msg)=>this.submitMsg(msg)}></ChatTextBox>\n      </div>\n    ) : (\n      <div id=\"chat-view-container\">Select a conversation</div>\n    );\n  }\n  submitMsg = msg => {\n    const { chat, user } = this.props;\n    const frnd=  chat.users.filter(x => {\n        return x !== user;\n      })[0];\n    const docId = this.getDocId(frnd);\n\n\n    firebase\n    .firestore()\n    .collection('chats')\n    .doc(docId)\n    .update({\n       messages: firebase.firestore.FieldValue.arrayUnion({\n           sender: user,\n           message: msg,\n           timestamp: Date.now()\n        }),\n        \n    })\n  };\n  getDocId = friend => {\n    return [this.props.user, friend].sort().join(\":\");\n  };\n}\n\nexport default ChatViewComponent;\n","import React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport './styles.css';\nconst firebase = require(\"firebase\");\n\nclass NewChatComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: null,\n      message: null,\n\n    };\n  }\n  render() {\n    return (\n      <div className=\"panelnc\">\n      <Row className=\"justify-content-center\"><Form className=\"formnc\" onSubmit={e => this.submitChat(e)}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter email of recipient\"\n            onChange={e => this.userTyping(\"username\", e)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Message</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows=\"3\"\n            onChange={e => this.userTyping(\"message\", e)}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n      </Row>\n      </div>\n    );\n  }\n  userTyping = (type, e) => {\n    switch (type) {\n      case \"username\":\n        this.setState({ username: e.target.value });\n        break;\n      case \"message\":\n        this.setState({ message: e.target.value });\n        break;\n      default:\n        break;\n    }\n  };\n  buildDocId = () => {\n    return [firebase.auth().currentUser.email, this.state.username]\n      .sort()\n      .join(\":\");\n  };\n  createChat = () => {\n    this.props.createChatFunction(this.state.username, this.state.message);\n  };\n  goToChat = () => {\n    this.props.goToChatFunction(this.buildDocId(), this.state.message);\n  };\n\n  submitChat = async e => {\n    e.preventDefault();\n    const userExists = await this.userExists();\n    if (userExists) {\n      const chatExists = await this.chatExists();\n      if (chatExists) {\n        this.goToChat();\n      } else {\n        this.createChat();\n      }\n    }\n  };\n  chatExists = async () => {\n    const docId = this.buildDocId();\n    const chat = await firebase\n      .firestore()\n      .collection(\"chats\")\n      .doc(docId)\n      .get();\n    //console.log(chat.exists);\n    return chat.exists;\n  };\n  userExists = async () => {\n    const userSnapshot = await firebase\n      .firestore()\n      .collection(\"users\")\n      .get();\n    const exists = userSnapshot.docs\n      .map(doc => doc.data().email)\n      .includes(this.state.username);\n    return exists;\n  };\n}\n\nexport default NewChatComponent;\n","import React, { Component } from \"react\";\nimport ChatlistComponent from \"../chatlist/chatlist\";\nimport Button from \"react-bootstrap/Button\";\nimport ChatViewComponent from \"../ChatViewComponent/chatViewComponent\";\nimport NewChatComponent from \"../newChat/newChat\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport './styles.css'\nconst firebase = require(\"firebase\");\n\nclass dashboardComponent extends Component {\n  state = {};\n  constructor() {\n    super();\n    this.setState({\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    });\n  }\n  render() {\n    return (\n      <div>\n       <Row> <Col className=\"left-side\" xs={12} md={5} >\n        <Row className=\"justify-content-center\"><div>\n          <ChatlistComponent\n            history={this.props.history}\n            newChatButtonFunction={this.newChatButtonClicked}\n            selectChatFunction={this.selectChat}\n            chats={this.state.chats}\n            userEmail={this.state.email}\n            selectedChatIndex={this.state.selectedChat}\n          ></ChatlistComponent>\n        </div>\n        </Row>\n        </Col>\n        <Col className=\"right-side\" xs={12} md={7}>\n        {this.state.newChatFormVisible ? (\n          <NewChatComponent goToChatFunction={this.goToChat} createChatFunction={this.newChatSubmit}></NewChatComponent>\n        ) : (\n          <ChatViewComponent\n            user={this.state.email}\n            chat={\n              this.state.selectedChat !== null && this.state.chats\n                ? this.state.chats[this.state.selectedChat]\n                : null\n            }\n          ></ChatViewComponent>\n        )}\n        </Col>\n        </Row>\n      </div>\n    );\n  }\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(\":\");\n    const chat = this.state.chats.find(_chat =>\n      usersInChat.every(_user => _chat.users.includes(_user))\n    );\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  };\n  buildDocId = (friend) => [this.state.email, friend].sort().join(':');\n\n  submitMessage = msg => {\n    const docKey = this.buildDocId(\n      this.state.chats[this.state.selectedChat].users.filter(\n        _usr => _usr !== this.state.email\n      )[0]\n    );\n    firebase\n      .firestore()\n      .collection(\"chats\")\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n  };\n  newChatSubmit = async (username,message) => {\n    const docId = this.buildDocId(username);\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docId)\n        .set({\n          messages: [{\n            message: message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, username],\n          receiverHasRead: false\n        })\n    this.setState({ newChatFormVisible: false });\n    this.selectChat(this.state.chats.length - 1);\n  }\n  selectChat = chatIndex => {\n    this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n\n    //console.log(\"selected a chat\", this.state.selectedChat);\n  };\n  newChatButtonClicked = () => {\n    this.setState({ selectedChat: null, newChatFormVisible: true });\n    //console.log(\"new chat button clicked\");\n  };\n  \n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        firebase\n          .firestore()\n          .collection(\"chats\")\n          .where(\"users\", \"array-contains\", user.email)\n          .onSnapshot(res => {\n            const chats = res.docs.map(doc => doc.data());\n            this.setState(\n              {\n                email: user.email,\n                chats: chats\n              },\n              () => {console.log('')}\n            );\n          });\n      } else {\n        this.props.history.push(\"/chatter/login\");\n      }\n    });\n  };\n}\n\nexport default dashboardComponent;\n","import React, { Component } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\n\nclass landingPage extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <Jumbotron>\n          <h1>Welcome to Chatter</h1>\n          <p>\n            This is a demo chat application made by me.\n            <br />\n            This application uses firebase as the back-end, and React.js, HTML\n            and CSS for the front-end.\n          </p>\n          <p>\n            <Button variant=\"primary\">Source Code</Button>\n          </p>\n          <p>\n            You can create an account with your email address and password. <br/>You\n            can also use the dummy accounts:-<br/> <b>Alice:</b> (email: alice@chatter.com,\n            password: mynameisalice) <br/><b>Bob:</b> (email: bob@chatter.com, password:\n            mynameisbob)\n          </p>\n          <Row>\n            <Col><Button variant=\"primary\" onClick={this.signup}>Sign Up </Button></Col>\n            <Col><Button variant=\"primary\" onClick={this.login}>Log In </Button></Col>\n            <Col md={9}><div/></Col>\n          </Row>\n          <p>\n              My webpage: <a href=\"http://sanketkumarsinghiitkgp.github.io\">http://sanketkumarsinghiitkgp.github.io</a><br/>\n              Check out my other works at <a href=\"https://github.com/sanketkumarsinghiitkgp\">https://github.com/sanketkumarsinghiitkgp</a>.\n          </p>\n        </Jumbotron>\n        \n      </div>\n    );\n  }\n\n  signup=()=>{\n    this.props.history.push('/chatter/signup');\n  }\n  login=()=>{\n    this.props.history.push('/chatter/login');\n  }\n}\n\n\n\nexport default landingPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport loginComponent from './components/login/login';\nimport signupComponent from './components/signup/signup';\nimport dashboardComponent from './components/dashboard/dashboard'\nimport landingPage from './components/landingPage/landingPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\n// not a safe practice, only for demonstration purpose.\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC7p4JkwdgXsegLf6E2kSxkneQdfd8QxTI\",\n  authDomain: \"chatter-4228b.firebaseapp.com\",\n  databaseURL: \"https://chatter-4228b.firebaseio.com\",\n  projectId: \"chatter-4228b\",\n  storageBucket: \"chatter-4228b.appspot.com\",\n  messagingSenderId: \"135428777546\",\n  appId: \"1:135428777546:web:cba2da25b8e262682ea8b3\",\n  measurementId: \"G-VNJL240M7Q\"\n});\n\nconst routing=(\n<Router>\n    <div id='routing-container'>\n    <Route path='/chatter/home' component={landingPage}></Route>\n    <Route path='/chatter/login' component={loginComponent}></Route>\n    <Route path='/chatter/signup' component={signupComponent}></Route>\n    <Route path='/chatter/dashboard' component={dashboardComponent}></Route>\n    </div>\n</Router>\n);\n\nReactDOM.render(<div>{routing}</div>, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}